{
  "name": "Quick SuperCode Demo",
  "nodes": [
    {
      "parameters": {},
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "code": "// Generate sample data with transformations\nconst sampleData = [\n  { name: 'Product A', price: 99.99, category: 'electronics', stock: 45 },\n  { name: 'Product B', price: 149.50, category: 'sports', stock: 23 },\n  { name: 'Product C', price: 29.99, category: 'home', stock: 156 },\n  { name: 'Product D', price: 89.95, category: 'electronics', stock: 67 },\n  { name: 'Product E', price: 199.00, category: 'sports', stock: 12 }\n];\n\n// Use global libraries (no require statements!)\nconst processedData = lodash.map(sampleData, item => ({\n  id: uuid.v4(),\n  ...item,\n  formattedPrice: `$${item.price.toFixed(2)}`,\n  processedAt: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n  slug: item.name.toLowerCase().replace(/\\s+/g, '-'),\n  inStock: item.stock > 0,\n  stockLevel: item.stock < 20 ? 'low' : item.stock < 50 ? 'medium' : 'high',\n  discount: item.price > 100 ? 0.15 : 0.05,\n  finalPrice: item.price * (1 - (item.price > 100 ? 0.15 : 0.05))\n}));\n\n// Calculate summary statistics using lodash\nconst summary = {\n  totalItems: processedData.length,\n  avgPrice: lodash.meanBy(processedData, 'price').toFixed(2),\n  minPrice: lodash.minBy(processedData, 'price').price,\n  maxPrice: lodash.maxBy(processedData, 'price').price,\n  categories: lodash.uniq(lodash.map(processedData, 'category')),\n  totalValue: lodash.sumBy(processedData, item => item.price * item.stock).toFixed(2),\n  lowStockItems: lodash.filter(processedData, item => item.stockLevel === 'low').length\n};\n\n// Group products by category\nconst byCategory = lodash.groupBy(processedData, 'category');\n\n// Create category summaries\nconst categoryStats = lodash.mapValues(byCategory, (items, category) => ({\n  category: category,\n  count: items.length,\n  avgPrice: lodash.meanBy(items, 'price').toFixed(2),\n  totalStock: lodash.sumBy(items, 'stock')\n}));\n\n// Generate a validation check using validator\nconst dataValidation = {\n  allPricesValid: lodash.every(processedData, item => validator.isFloat(item.price.toString(), { min: 0 })),\n  allIdsUnique: lodash.uniqBy(processedData, 'id').length === processedData.length,\n  allSlugsValid: lodash.every(processedData, item => validator.isSlug(item.slug))\n};\n\n// Return formatted response\nreturn [{\n  json: {\n    success: true,\n    data: processedData,\n    summary: summary,\n    categoryBreakdown: categoryStats,\n    validation: dataValidation,\n    meta: {\n      workflowName: 'Quick SuperCode Demo',\n      processedAt: dayjs().toISOString(),\n      timezone: dayjs.tz.guess(),\n      nodeVersion: '1.0.0',\n      librariesUsed: ['lodash', 'dayjs', 'uuid', 'validator']\n    }\n  }\n}];"
      },
      "id": "b2c3d4e5-f6a7-8901-bcde-f23456789012",
      "name": "SuperCode Data Processor",
      "type": "@kenkaiii/n8n-nodes-supercode.superCodeNodeVmSafe",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "c3d4e5f6-a789-0123-cdef-345678901234",
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [650, 300]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "SuperCode Data Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SuperCode Data Processor": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateId": "quick-supercode-demo",
    "templateVersion": 1,
    "templateDescription": "Quick 3-node workflow demonstrating SuperCode capabilities with data processing"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "active": false,
  "tags": [],
  "versionId": "f4e5d6c7-b8a9-0123-def4-567890123456",
  "triggerCount": 0
}
