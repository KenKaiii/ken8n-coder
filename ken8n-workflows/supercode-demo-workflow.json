{
  "name": "Super Code Power Demo",
  "nodes": [
    {
      "parameters": {},
      "id": "9d4b1420-d1f5-4b5a-8c3e-2a3f4e5d6c7b",
      "name": "Manual",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e3d2f1a0-b9c8-47d6-ae5f-3c2b1a0e9d8f",
              "name": "customers",
              "value": "=[\n  {\n    \"id\": \"cust_001\",\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"joinDate\": \"2023-01-15\",\n    \"totalSpent\": 2450.50,\n    \"orders\": 12,\n    \"location\": {\n      \"city\": \"New York\",\n      \"country\": \"USA\",\n      \"coordinates\": [40.7128, -74.0060]\n    },\n    \"preferences\": [\"electronics\", \"books\", \"sports\"]\n  },\n  {\n    \"id\": \"cust_002\",\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane.smith@example.com\",\n    \"joinDate\": \"2023-03-22\",\n    \"totalSpent\": 3890.75,\n    \"orders\": 23,\n    \"location\": {\n      \"city\": \"London\",\n      \"country\": \"UK\",\n      \"coordinates\": [51.5074, -0.1278]\n    },\n    \"preferences\": [\"fashion\", \"home\", \"beauty\"]\n  },\n  {\n    \"id\": \"cust_003\",\n    \"name\": \"Bob Johnson\",\n    \"email\": \"bob.j@example.com\",\n    \"joinDate\": \"2022-11-08\",\n    \"totalSpent\": 1234.00,\n    \"orders\": 8,\n    \"location\": {\n      \"city\": \"Sydney\",\n      \"country\": \"Australia\",\n      \"coordinates\": [-33.8688, 151.2093]\n    },\n    \"preferences\": [\"outdoor\", \"sports\", \"tech\"]\n  }\n]",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d",
      "name": "Set Customer Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [450, 200]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9e8d7c6-b5a4-43e2-1f0e-9d8c7b6a5f4e",
              "name": "products",
              "value": "=[\n  {\n    \"productId\": \"prod_101\",\n    \"name\": \"Wireless Headphones\",\n    \"category\": \"electronics\",\n    \"price\": 149.99,\n    \"stock\": 45,\n    \"ratings\": [4.5, 4.8, 4.2, 4.9, 4.7],\n    \"tags\": [\"audio\", \"wireless\", \"bluetooth\"]\n  },\n  {\n    \"productId\": \"prod_102\",\n    \"name\": \"Yoga Mat Premium\",\n    \"category\": \"sports\",\n    \"price\": 39.99,\n    \"stock\": 120,\n    \"ratings\": [4.9, 5.0, 4.8, 4.7, 4.9],\n    \"tags\": [\"fitness\", \"yoga\", \"exercise\"]\n  },\n  {\n    \"productId\": \"prod_103\",\n    \"name\": \"Smart Watch Pro\",\n    \"category\": \"electronics\",\n    \"price\": 299.99,\n    \"stock\": 23,\n    \"ratings\": [4.3, 4.5, 4.1, 4.6],\n    \"tags\": [\"wearable\", \"fitness\", \"smart\"]\n  },\n  {\n    \"productId\": \"prod_104\",\n    \"name\": \"Organic Face Cream\",\n    \"category\": \"beauty\",\n    \"price\": 65.00,\n    \"stock\": 89,\n    \"ratings\": [4.8, 4.9, 5.0, 4.7, 4.8, 4.9],\n    \"tags\": [\"skincare\", \"organic\", \"moisturizer\"]\n  }\n]",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "d6e7f8a9-b0c1-42d3-e4f5-67a8b9c0d1e2",
      "name": "Set Product Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [450, 400]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "code": "// Super Code Node demonstrating multiple library usage\n// Libraries used: lodash, dayjs, validator, uuid, CryptoJS\n\n// Get input data from both Set nodes\nconst customers = $input.all()[0].json.customers;\nconst products = $input.all()[1].json.products;\n\n// 1. Using lodash for data manipulation\nconst customerStats = {\n  totalRevenue: lodash.sumBy(customers, 'totalSpent'),\n  averageOrderValue: lodash.meanBy(customers, customer => customer.totalSpent / customer.orders),\n  topSpender: lodash.maxBy(customers, 'totalSpent'),\n  customersByCountry: lodash.groupBy(customers, 'location.country')\n};\n\n// 2. Using dayjs for date calculations\nconst currentDate = dayjs();\nconst customerAnalysis = customers.map(customer => {\n  const joinDate = dayjs(customer.joinDate);\n  const daysAsCustomer = currentDate.diff(joinDate, 'day');\n  const monthsAsCustomer = currentDate.diff(joinDate, 'month');\n  \n  return {\n    ...customer,\n    daysAsCustomer,\n    monthsAsCustomer,\n    customerSince: joinDate.format('MMMM D, YYYY'),\n    loyaltyTier: monthsAsCustomer > 12 ? 'Gold' : monthsAsCustomer > 6 ? 'Silver' : 'Bronze'\n  };\n});\n\n// 3. Using validator for email validation and data cleaning\nconst validatedCustomers = customerAnalysis.map(customer => ({\n  ...customer,\n  emailValid: validator.isEmail(customer.email),\n  emailDomain: customer.email.split('@')[1],\n  nameLength: validator.isLength(customer.name, { min: 2, max: 50 })\n}));\n\n// 4. Using uuid to generate unique IDs for recommendations\nconst recommendations = [];\nvalidatedCustomers.forEach(customer => {\n  const relevantProducts = products.filter(product => \n    customer.preferences.some(pref => \n      product.category.toLowerCase() === pref.toLowerCase() ||\n      product.tags.some(tag => tag.toLowerCase().includes(pref.toLowerCase()))\n    )\n  );\n  \n  relevantProducts.forEach(product => {\n    recommendations.push({\n      recommendationId: uuid.v4(),\n      customerId: customer.id,\n      customerName: customer.name,\n      productId: product.productId,\n      productName: product.name,\n      matchReason: 'preference_match',\n      score: lodash.mean(product.ratings),\n      timestamp: dayjs().toISOString()\n    });\n  });\n});\n\n// 5. Using CryptoJS for creating secure hashes\nconst secureCustomerData = validatedCustomers.map(customer => {\n  const dataToHash = `${customer.id}:${customer.email}:${customer.totalSpent}`;\n  const hash = CryptoJS.SHA256(dataToHash).toString();\n  \n  return {\n    ...customer,\n    securityHash: hash,\n    hashedEmail: CryptoJS.MD5(customer.email.toLowerCase()).toString()\n  };\n});\n\n// Product analysis using multiple libraries\nconst productAnalysis = products.map(product => {\n  const avgRating = lodash.mean(product.ratings);\n  const ratingStdDev = lodash.round(Math.sqrt(lodash.mean(product.ratings.map(r => Math.pow(r - avgRating, 2)))), 2);\n  \n  return {\n    ...product,\n    avgRating: lodash.round(avgRating, 2),\n    ratingStdDev,\n    ratingCount: product.ratings.length,\n    stockStatus: product.stock < 30 ? 'Low' : product.stock < 100 ? 'Medium' : 'High',\n    priceCategory: product.price < 50 ? 'Budget' : product.price < 150 ? 'Mid-range' : 'Premium',\n    uniqueId: uuid.v4(),\n    lastUpdated: dayjs().format('YYYY-MM-DD HH:mm:ss')\n  };\n});\n\n// Create summary report\nconst summaryReport = {\n  generatedAt: dayjs().format('MMMM D, YYYY h:mm A'),\n  reportId: uuid.v4(),\n  customerMetrics: {\n    totalCustomers: customers.length,\n    totalRevenue: customerStats.totalRevenue,\n    averageOrderValue: lodash.round(customerStats.averageOrderValue, 2),\n    topSpender: customerStats.topSpender.name,\n    customerDistribution: lodash.mapValues(customerStats.customersByCountry, arr => arr.length)\n  },\n  productMetrics: {\n    totalProducts: products.length,\n    averagePrice: lodash.round(lodash.meanBy(products, 'price'), 2),\n    totalInventoryValue: lodash.sumBy(products, p => p.price * p.stock),\n    lowStockProducts: productAnalysis.filter(p => p.stockStatus === 'Low').length,\n    topRatedProduct: lodash.maxBy(productAnalysis, 'avgRating')\n  },\n  recommendationMetrics: {\n    totalRecommendations: recommendations.length,\n    uniqueCustomersWithRecommendations: lodash.uniqBy(recommendations, 'customerId').length,\n    avgRecommendationsPerCustomer: lodash.round(recommendations.length / customers.length, 2)\n  },\n  dataIntegrity: {\n    validEmails: validatedCustomers.filter(c => c.emailValid).length,\n    invalidEmails: validatedCustomers.filter(c => !c.emailValid).length,\n    dataProcessed: true,\n    processingTime: dayjs().valueOf()\n  }\n};\n\n// Return comprehensive analysis\nreturn {\n  summaryReport,\n  customerAnalysis: secureCustomerData,\n  productAnalysis,\n  recommendations: lodash.take(lodash.orderBy(recommendations, ['score'], ['desc']), 10),\n  processingMetadata: {\n    librariesUsed: ['lodash', 'dayjs', 'validator', 'uuid', 'CryptoJS'],\n    dataPoints: {\n      customersProcessed: customers.length,\n      productsAnalyzed: products.length,\n      recommendationsGenerated: recommendations.length\n    },\n    timestamp: dayjs().toISOString()\n  }\n};"
      },
      "id": "2f3e4d5c-6b7a-48e9-fc0d-1e2f3a4b5c6d",
      "name": "Super Code Processing",
      "type": "@kenkaiii/n8n-nodes-supercode.superCodeNodeVmSafe",
      "typeVersion": 1,
      "position": [750, 300]
    }
  ],
  "connections": {
    "Manual": {
      "main": [
        [
          {
            "node": "Set Customer Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Product Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Customer Data": {
      "main": [
        [
          {
            "node": "Super Code Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Product Data": {
      "main": [
        [
          {
            "node": "Super Code Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8a7b6c5d-4e3f-2a1b-9c8d-7e6f5a4b3c2d",
  "id": "supercode-demo-001",
  "meta": {
    "instanceId": "n8n-demo"
  },
  "tags": []
}
