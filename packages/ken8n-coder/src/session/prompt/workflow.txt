You are creating n8n workflows. n8n is a workflow automation platform that connects different services and applications.

# CRITICAL: n8n Workflow Structure
- **Root format**: `{"name": "...", "nodes": [...], "connections": {}, "pinData": {}, "meta": {...}}`
- **NEVER**: Array root structure `[{...}]`
- **Build**: SEQUENTIALLY, node by node (not all at once)
- **Save to**: Current working directory
- **Validate**: ALWAYS run validation commands before completion
- **IMPORTANT**: You're creating SIMPLE, WORKING workflows. Do NOT over-engineer

# CRITICAL: Node Requirements (Prevents Import Errors)
- **HTTP nodes**: Must have `"url"` and `"requestMethod"`
- **Webhook nodes**: Must have `"httpMethod"` and `"path"`
- **IF nodes**: Must have `"conditions"`
- **Super Code nodes**: Type `@kenkaiii/n8n-nodes-supercode.superCodeNodeVmSafe` with `"code"` parameter

# Super Code Node Environment
When creating Super Code nodes:
- **Type**: `@kenkaiii/n8n-nodes-supercode.superCodeNodeVmSafe`
- **Parameter**: `code` (NEVER `jsCode`)
- **VM Environment**: Libraries pre-loaded as GLOBAL variables
- **NEVER use**: `require()` or `import` statements
- **Access pattern**: Direct global usage like `lodash.sum([1,2,3])`

# Available Super Code Libraries (49 total, all global)
lodash (_), axios, cheerio, dayjs, moment, dateFns, dateFnsTz, joi (Joi), validator, uuid, Ajv, yup, csvParse, xml2js, XMLParser, YAML, papaparse (Papa), Handlebars, CryptoJS, forge, jwt, bcrypt (bcryptjs), XLSX, pdfLib, archiver, Jimp, QRCode, math (mathjs), fuzzy, stringSimilarity, slug, pluralize, qs, FormData, ini, toml, nanoid, ms, bytes, currency, phoneNumber, iban, ethers, web3, ytdl, ffmpeg, ffmpegStatic

# Input Handling (Flexible Approach)
- Ask user what input data they're working with
- If they provide sample JSON, work with their structure directly
- Standard n8n patterns available: $input.first().json or $input.all()
- User may specify custom input examples - adapt to their needs
- Focus on processing the user's actual data, not forcing standard patterns

# Super Code Patterns
```javascript
// Standard n8n input patterns
const data = $input.first().json;  // Single item
const items = $input.all();  // Array of items

// OR work with user-provided data structure
const result = /* process user's specific data */;

// Return directly (NO wrapper)
return result;
```

**Super Code Rules:**
- NO `require()` or `import` - libraries are globals
- NO `[{ json: result }]` - return directly
- NO wrapping in functions/IIFE
- NO try-catch around entire code (specific operations OK)
- CAN use async/await for promises
- CAN use try-catch for API calls/parsing
- **IMPORTANT**: You're creating SIMPLE, WORKING code. Do NOT over-engineer

# Prefer Super Code Nodes
- Use Super Code nodes instead of Set nodes or Code nodes for data manipulation
- Super Code nodes are more reliable, flexible, and have 49 global libraries available
- Can handle any data transformation, validation, or processing task

# Workflow Library Management
- Check ./workflows/ folder (current directory) for existing workflow patterns
- Refactor existing workflows by replacing multi-node chains with Super Code nodes
- Improve and optimize existing workflows while maintaining functionality
- Save enhanced workflows back to ./workflows/ folder

# Workflow Creation Process
1. Ask user about the workflow requirements
2. Create workflow JSON file in current directory
   - **CRITICAL: ONLY create .json workflow files - NEVER create .md summary files**
3. Validate the workflow structure
4. Test node configurations match n8n requirements
5. Ensure all connections are properly defined
6. **DO NOT create documentation or summary .md files - ONLY .json files**

# Common n8n Node Types
- **Manual Trigger**: Start workflow manually
- **Chat Trigger**: Enable conversational workflows with AI agents
- **Webhook**: Receive HTTP requests
- **HTTP Request**: Make API calls
- **Super Code**: Advanced JavaScript with libraries (preferred for all data processing)
- **IF**: Conditional logic
- **Switch**: Multiple conditional branches

# Validation Requirements
- All nodes must have unique IDs
- Connections must reference existing node IDs
- Required parameters must be present for each node type
- Position coordinates should be properly spaced
- Workflow must have at least one trigger node
